/*
 * Copyright (C) 2018 bzt (bztsrc//github)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

.section ".text.boot"

.global _start

_start:
    // read cpu id, stop slave cores
    mrs     x1, mpidr_el1
    and     x1, x1, #3
    cbz     x1, 2f
    // cpu id > 0, stop
1:  wfe
    b       1b
2:  // cpu id == 0, continue
    // get the dtb address
    ldr     x1, =__dtb_address
    str     x0, [x1] // store the dtb address to the address given by the linker script

    // set exception vector table
    bl      set_exception_vector_table

    // change exception level to EL2
    bl      from_el2_to_el1
    
    // set top of stack just before our code (stack grows to a lower address per AAPCS64)
    ldr     x1, =_start
    mov     sp, x1 // set stack pointer

    // turn on the accessibility to SIMD and floating registers
    //mrs     x1, cpacr_el1
    //orr     x1, x1, 0x300000
    //msr     cpacr_el1, x1

5:  
    // clear bss
    ldr     x1, =__bss_start
    ldr     w2, =__bss_size
3:  cbz     w2, 4f
    str     xzr, [x1], #8
    sub     w2, w2, #1
    cbnz    w2, 3b

    // jump to C code, should not return
4:
    //bl      from_el2_to_el1 // this instruction will fail here, but success when we put it behind. why?
6:
    bl      main
    // for failsafe, halt this core too
    b       1b

from_el2_to_el1:
    mov x0, #(1 << 31) // EL1 uses aarch64
    msr hcr_el2, x0
    mov x0, #0x3c5 // EL1h (SPSel = 1) with interrupt disabled
    msr spsr_el2, x0
    msr elr_el2, lr
    eret // return to EL1

// save general registers to stack
.macro save_all
    sub sp, sp, 32 * 8
    stp x0, x1, [sp ,16 * 0]
    stp x2, x3, [sp ,16 * 1]
    stp x4, x5, [sp ,16 * 2]
    stp x6, x7, [sp ,16 * 3]
    stp x8, x9, [sp ,16 * 4]
    stp x10, x11, [sp ,16 * 5]
    stp x12, x13, [sp ,16 * 6]
    stp x14, x15, [sp ,16 * 7]
    stp x16, x17, [sp ,16 * 8]
    stp x18, x19, [sp ,16 * 9]
    stp x20, x21, [sp ,16 * 10]
    stp x22, x23, [sp ,16 * 11]
    stp x24, x25, [sp ,16 * 12]
    stp x26, x27, [sp ,16 * 13]
    stp x28, x29, [sp ,16 * 14]
    str x30, [sp, 16 * 15]
.endm

// load general registers from stack
.macro load_all
    ldp x0, x1, [sp ,16 * 0]
    ldp x2, x3, [sp ,16 * 1]
    ldp x4, x5, [sp ,16 * 2]
    ldp x6, x7, [sp ,16 * 3]
    ldp x8, x9, [sp ,16 * 4]
    ldp x10, x11, [sp ,16 * 5]
    ldp x12, x13, [sp ,16 * 6]
    ldp x14, x15, [sp ,16 * 7]
    ldp x16, x17, [sp ,16 * 8]
    ldp x18, x19, [sp ,16 * 9]
    ldp x20, x21, [sp ,16 * 10]
    ldp x22, x23, [sp ,16 * 11]
    ldp x24, x25, [sp ,16 * 12]
    ldp x26, x27, [sp ,16 * 13]
    ldp x28, x29, [sp ,16 * 14]
    ldr x30, [sp, 16 * 15]
    add sp, sp, 32 * 8
.endm

.align 11 // vector table should be aligned to 0x800
.global exception_vector_table
exception_vector_table:
    // Exception from the current EL while using SP_EL0
    .align 7 // synchronous
    mov     x0, #0
    b exception_handler
    .align 7 // irq
    mov     x0, #1
    b exception_handler
    .align 7 // fiq
    mov     x0, #2
    b exception_handler
    .align 7 // serr
    mov     x0, #3
    b exception_handler

    // Exception from the current EL while using SP_ELx (x = 1 or 2)
    .align 7 // synchronous
    mov     x0, #0
    b exception_handler
    .align 7 // irq
    mov     x0, #1
    b exception_handler
    .align 7 // fiq
    mov     x0, #2
    b exception_handler
    .align 7 // serr
    mov     x0, #3
    b exception_handler

    // Exception from a lower Exception level and at least one lower Exception level uses AArch64
     .align 7 // synchronous
    mov     x0, #0
    b exception_handler
    .align 7 // irq
    mov     x0, #1
    b exception_handler
    .align 7 // fiq
    mov     x0, #2
    b exception_handler
    .align 7 // serr
    mov     x0, #3
    b exception_handler

    // Exception from a lower Exception level and all lower Exception levels use AArch32
    .align 7 // synchronous
    mov     x0, #0
    b exception_handler
    .align 7 // irq
    mov     x0, #1
    b exception_handler
    .align 7 // fiq
    mov     x0, #2
    b exception_handler
    .align 7 // serr
    mov     x0, #3
    b exception_handler

set_exception_vector_table:
  adr x0, exception_vector_table
  msr vbar_el1, x0
  ret

exception_handler:
    save_all
    mrs     x1, esr_el1
    mrs     x2, elr_el1
    mrs     x3, spsr_el1
    mrs     x4, far_el1
    bl exc_handler
    load_all
    eret